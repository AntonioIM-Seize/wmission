{"version":3,"sources":["turbopack:///[project]/lib/storage/utils.ts","turbopack:///[project]/components/ui/alert.tsx","turbopack:///[project]/components/ui/separator.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/lib/utils/date.ts","turbopack:///[project]/components/ui/card.tsx","turbopack:///[project]/lib/utils/supabase.ts","turbopack:///[project]/lib/monitoring/logger.ts","turbopack:///[project]/lib/utils/text.ts","turbopack:///[project]/lib/data/prayer.ts","turbopack:///[project]/app/(public)/prayer/actions.ts","turbopack:///[project]/lib/validators/prayer.ts","turbopack:///[project]/components/prayer/prayer-reactions.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/.next-internal/server/app/(public)/prayer/page/actions.js (server actions loader)","turbopack:///[project]/components/forms/prayer-form.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/app/(public)/prayer/page.tsx"],"sourcesContent":["const FALLBACK_IMAGE_BUCKET = 'content-images';\n\nexport const SUPABASE_IMAGE_BUCKET = process.env.NEXT_PUBLIC_SUPABASE_IMAGE_BUCKET ?? FALLBACK_IMAGE_BUCKET;\n\ntype StorageLocation = {\n  bucket: string;\n  path: string;\n};\n\n/**\n * Extracts storage bucket and object path from a public Supabase Storage URL.\n * Returns null when the URL targets a different project/bucket or is malformed.\n */\nexport function parsePublicStorageUrl(publicUrl: string): StorageLocation | null {\n  if (!publicUrl) {\n    return null;\n  }\n\n  try {\n    const url = new URL(publicUrl);\n    const segments = url.pathname.split('/').filter(Boolean);\n    const publicIndex = segments.findIndex((segment) => segment === 'public');\n\n    if (publicIndex === -1) {\n      return null;\n    }\n\n    const bucket = decodeURIComponent(segments[publicIndex + 1] ?? '');\n    const pathSegments = segments.slice(publicIndex + 2).map((segment) => decodeURIComponent(segment));\n    const path = pathSegments.join('/');\n\n    if (!bucket || !path) {\n      return null;\n    }\n\n    return {\n      bucket,\n      path,\n    };\n  } catch (error) {\n    console.error('공개 스토리지 URL 파싱 실패', error);\n    return null;\n  }\n}\n\ntype StorageCapableClient = {\n  storage: {\n    from(bucket: string): {\n      remove(paths: string[]): Promise<{ data: unknown; error: unknown }>;\n    };\n  };\n};\n\nexport async function removePublicStorageFile(\n  supabase: StorageCapableClient,\n  publicUrl: string,\n  options: { expectedBucket?: string } = {},\n) {\n  const location = parsePublicStorageUrl(publicUrl);\n  if (!location) {\n    return;\n  }\n\n  const expectedBucket = options.expectedBucket ?? SUPABASE_IMAGE_BUCKET;\n  if (expectedBucket && location.bucket !== expectedBucket) {\n    return;\n  }\n\n  const { error } = await supabase.storage.from(location.bucket).remove([location.path]);\n\n  if (error) {\n    console.error('스토리지 객체 삭제 실패', error);\n  }\n}\n","import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Separator = registerClientReference(\n    function() { throw new Error(\"Attempted to call Separator() from the server but Separator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/separator.tsx\",\n    \"Separator\",\n);\n","import { DEFAULT_LANGUAGE, type SupportedLanguage } from '@/lib/i18n/config';\n\nexport function formatDate(value: string | number | Date, language: SupportedLanguage = DEFAULT_LANGUAGE) {\n  if (!value) {\n    return '';\n  }\n\n  const date = value instanceof Date ? value : new Date(value);\n\n  if (Number.isNaN(date.getTime())) {\n    return '';\n  }\n\n  return new Intl.DateTimeFormat(language, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  }).format(date);\n}\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","/**\n * Supabase ILIKE 검색 시 %, _ 등 메타문자를 이스케이프합니다.\n */\nexport function escapeIlikePattern(input: string) {\n  return input.replace(/[%_]/g, (match) => `\\\\${match}`);\n}\n","type LogLevel = 'info' | 'warn' | 'error';\n\ntype LogContext = Record<string, unknown>;\n\nconst ENVIRONMENT = process.env.NODE_ENV ?? 'development';\n\nfunction sanitizeMeta(meta?: LogContext) {\n  if (!meta) {\n    return undefined;\n  }\n\n  return JSON.parse(\n    JSON.stringify(meta, (_key, value) => {\n      if (value instanceof Error) {\n        return {\n          name: value.name,\n          message: value.message,\n          stack: value.stack,\n        };\n      }\n      return value;\n    }),\n  );\n}\n\nfunction writeLog(level: LogLevel, message: string, meta?: LogContext) {\n  const payload = {\n    level,\n    message,\n    meta: sanitizeMeta(meta),\n    timestamp: new Date().toISOString(),\n    environment: ENVIRONMENT,\n  };\n\n  const serialized = JSON.stringify(payload);\n\n  switch (level) {\n    case 'error':\n      console.error(serialized);\n      break;\n    case 'warn':\n      console.warn(serialized);\n      break;\n    default:\n      console.info(serialized);\n  }\n}\n\nexport function logInfo(message: string, meta?: LogContext) {\n  writeLog('info', message, meta);\n}\n\nexport function logWarn(message: string, meta?: LogContext) {\n  writeLog('warn', message, meta);\n}\n\nexport function logError(message: string, meta?: LogContext) {\n  writeLog('error', message, meta);\n}\n","export function truncateText(text: string, maxLength: number) {\n  if (!text) {\n    return '';\n  }\n\n  if (text.length <= maxLength) {\n    return text;\n  }\n\n  return `${text.slice(0, maxLength).trimEnd()}…`;\n}\n\nexport function stripMarkdown(value: string) {\n  if (!value) {\n    return '';\n  }\n\n  return value.replace(/[#*_>`~\\[\\]\\(\\)]/g, '');\n}\n\nexport function stripHtml(value: string) {\n  if (!value) {\n    return '';\n  }\n\n  return value.replace(/<[^>]*>/g, '');\n}\n","import { createSupabaseServerClient } from '@/lib/supabase/server';\nimport { sanitizeHTML } from '@/lib/sanitize';\nimport { escapeIlikePattern } from '@/lib/utils/supabase';\nimport { stripMarkdown, truncateText } from '@/lib/utils/text';\nimport { logError } from '@/lib/monitoring/logger';\n\nimport type { Database, PrayerReactionType, ProfileStatus, UserRole } from '@/types/supabase';\n\ntype PrayerRow = Database['public']['Tables']['prayers']['Row'] & {\n  author?: {\n    id: string;\n    full_name: string | null;\n    status: ProfileStatus;\n    role: UserRole;\n  };\n  prayer_reactions?: Array<{\n    reaction_type: PrayerReactionType | null;\n  }>;\n};\n\nexport type PrayerListItem = {\n  id: string;\n  content: string;\n  createdAt: string;\n  isAnswered: boolean;\n  answeredAt: string | null;\n  authorName: string;\n  reactions: {\n    amen: number;\n    together: number;\n  };\n  imageUrl: string | null;\n};\n\nexport type PrayerListResult = {\n  items: PrayerListItem[];\n  total: number;\n  page: number;\n  pageSize: number;\n};\n\nexport type PrayerDetail = {\n  id: string;\n  content: string;\n  createdAt: string;\n  isAnswered: boolean;\n  answeredAt: string | null;\n  authorId: string;\n  authorName: string;\n  authorRole: UserRole;\n  authorStatus: ProfileStatus;\n  reactions: {\n    amen: number;\n    together: number;\n  };\n  imageUrl: string | null;\n};\n\nexport type PrayerListFilters = {\n  search?: string | null;\n  status?: 'all' | 'answered' | 'pending';\n};\n\nexport async function getPrayers(params: {\n  page: number;\n  pageSize: number;\n  filters?: PrayerListFilters;\n}): Promise<PrayerListResult> {\n  const { page, pageSize, filters } = params;\n  const supabase = await createSupabaseServerClient();\n\n  const from = (page - 1) * pageSize;\n  const to = from + pageSize - 1;\n\n  const searchQuery = filters?.search?.trim();\n  const statusFilter = filters?.status ?? 'all';\n\n  let query = supabase\n    .from('prayers')\n    .select(\n      `\n        id,\n        content,\n        created_at,\n        is_answered,\n        answered_at,\n        author:profiles!prayers_author_id_fkey (\n          id,\n          full_name,\n          status,\n          role\n        ),\n        prayer_reactions (\n          reaction_type\n        ),\n        image_url\n      `,\n      { count: 'exact' },\n    )\n    .order('created_at', { ascending: false });\n\n  if (statusFilter === 'answered') {\n    query = query.eq('is_answered', true);\n  } else if (statusFilter === 'pending') {\n    query = query.eq('is_answered', false);\n  }\n\n  if (searchQuery) {\n    const pattern = `%${escapeIlikePattern(searchQuery)}%`;\n    query = query.or(\n      `content.ilike.${pattern},profiles!prayers_author_id_fkey.full_name.ilike.${pattern}`,\n    );\n  }\n\n  const { data, count, error } = (await query.range(from, to)) as {\n    data: PrayerRow[] | null;\n    count: number | null;\n    error: Error | null;\n  };\n\n  if (error) {\n    logError('기도 목록 조회 실패', { error, pagination: { page, pageSize }, filters });\n    return { items: [], total: 0, page, pageSize };\n  }\n\n  const items =\n    data?.map((row) => {\n      const sourceContent = row.content ?? '';\n      const reactions = row.prayer_reactions ?? [];\n      const counts = reactions.reduce(\n        (acc, current) => {\n          if (current?.reaction_type === 'amen') acc.amen += 1;\n          if (current?.reaction_type === 'together') acc.together += 1;\n          return acc;\n        },\n        { amen: 0, together: 0 },\n      );\n\n      return {\n        id: row.id,\n        content: truncateText(stripMarkdown(sourceContent), 180),\n        createdAt: row.created_at,\n        isAnswered: row.is_answered,\n        answeredAt: row.answered_at,\n        authorName: row.author?.full_name ?? '익명',\n        reactions: counts,\n        imageUrl: row.image_url ?? null,\n      } satisfies PrayerListItem;\n    }) ?? [];\n\n  return {\n    items,\n    total: count ?? items.length,\n    page,\n    pageSize,\n  };\n}\n\nexport async function getPrayerById(id: string): Promise<PrayerDetail | null> {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = (await supabase\n    .from('prayers')\n    .select(\n      `\n        id,\n        content,\n        created_at,\n        is_answered,\n        answered_at,\n        author:profiles!prayers_author_id_fkey (\n          id,\n          full_name,\n          status,\n          role\n        ),\n        prayer_reactions (\n          reaction_type\n        ),\n        image_url\n      `,\n    )\n    .eq('id', id)\n    .maybeSingle()) as { data: PrayerRow | null; error: Error | null };\n\n  if (error) {\n    logError('기도 상세 조회 실패', { error, prayerId: id });\n    return null;\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  const reactions = data.prayer_reactions ?? [];\n  const counts = reactions.reduce(\n    (acc, current) => {\n      if (current?.reaction_type === 'amen') acc.amen += 1;\n      if (current?.reaction_type === 'together') acc.together += 1;\n      return acc;\n    },\n    { amen: 0, together: 0 },\n  );\n\n  return {\n    id: data.id,\n    content: sanitizeHTML(data.content ?? ''),\n    createdAt: data.created_at,\n    isAnswered: data.is_answered,\n    answeredAt: data.answered_at,\n    authorId: data.author?.id ?? '',\n    authorName: data.author?.full_name ?? '익명',\n    authorRole: data.author?.role ?? 'member',\n    authorStatus: data.author?.status ?? 'approved',\n    reactions: counts,\n    imageUrl: data.image_url ?? null,\n  } satisfies PrayerDetail;\n}\n\nexport type PrayerAdminMetrics = {\n  total: number;\n  answered: number;\n  pending: number;\n};\n\nexport async function getPrayerAdminMetrics(): Promise<PrayerAdminMetrics> {\n  const supabase = await createSupabaseServerClient();\n\n  const [totalResult, answeredResult] = await Promise.all([\n    supabase.from('prayers').select('id', { count: 'exact', head: true }),\n    supabase.from('prayers').select('id', { count: 'exact', head: true }).eq('is_answered', true),\n  ]);\n\n  if (totalResult.error) {\n    logError('전체 기도 수 조회 실패', { error: totalResult.error });\n  }\n\n  if (answeredResult.error) {\n    logError('응답 기도 수 조회 실패', { error: answeredResult.error });\n  }\n\n  const total = totalResult.count ?? 0;\n  const answered = answeredResult.count ?? 0;\n  const pending = Math.max(total - answered, 0);\n\n  return {\n    total,\n    answered,\n    pending,\n  };\n}\n","'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\n\nimport { requireApprovedStatus, getCurrentProfile } from '@/lib/auth/session';\nimport { isAdmin } from '@/lib/auth/utils';\nimport { createSupabaseServerClient } from '@/lib/supabase/server';\nimport { sanitizeHTML } from '@/lib/sanitize';\nimport { prayerCreateSchema, prayerUpdateSchema, type PrayerCreateValues, type PrayerUpdateValues } from '@/lib/validators/prayer';\nimport { logError } from '@/lib/monitoring/logger';\nimport { removePublicStorageFile } from '@/lib/storage/utils';\n\ntype PrayerActionError = {\n  status: 'error';\n  message: string;\n  fieldErrors?: Partial<Record<keyof PrayerCreateValues, string[]>>;\n};\n\nexport async function createPrayerAction(values: PrayerCreateValues): Promise<PrayerActionError | void> {\n  const profile = await requireApprovedStatus(['approved']);\n\n  const parsed = prayerCreateSchema.safeParse(values);\n\n  if (!parsed.success) {\n    return {\n      status: 'error',\n      message: '입력값을 확인해주세요.',\n      fieldErrors: parsed.error.flatten().fieldErrors,\n    };\n  }\n\n  const supabase = await createSupabaseServerClient();\n  const sanitizedContent = sanitizeHTML(parsed.data.content);\n\n  const { data, error } = await supabase\n    .from('prayers')\n    .insert({\n      author_id: profile.id,\n      content: sanitizedContent,\n      image_url: parsed.data.imageUrl ? parsed.data.imageUrl.trim() : null,\n    })\n    .select('id')\n    .single();\n\n  if (error || !data) {\n    logError('기도 작성 실패', { error, profileId: profile.id });\n    return {\n      status: 'error',\n      message: '기도 제목을 등록하지 못했습니다. 잠시 후 다시 시도해주세요.',\n    };\n  }\n\n  revalidatePath('/prayer');\n}\n\ntype ReactionPayload = {\n  prayerId: string;\n  reaction: 'amen' | 'together';\n  revalidate?: string[];\n};\n\ntype ReactionResult = { status: 'error'; message: string } | { status: 'success' };\n\nexport async function reactPrayerAction(payload: ReactionPayload): Promise<ReactionResult> {\n  const profile = await getCurrentProfile();\n\n  if (!profile) {\n    return {\n      status: 'error',\n      message: '로그인 후 참여할 수 있습니다.',\n    };\n  }\n\n  if (profile.status === 'blocked') {\n    return {\n      status: 'error',\n      message: '차단된 계정은 반응을 남길 수 없습니다.',\n    };\n  }\n\n  const supabase = await createSupabaseServerClient();\n\n  const { error } = await supabase.from('prayer_reactions').insert({\n    prayer_id: payload.prayerId,\n    member_id: profile.id,\n    reaction_type: payload.reaction,\n  });\n\n  if (error) {\n    // 고유 제약 조건 위반(중복 반응)은 무시\n    if ('code' in error && error.code === '23505') {\n      return { status: 'success' };\n    }\n\n    logError('기도 반응 등록 실패', { error, profileId: profile.id, payload });\n    return {\n      status: 'error',\n      message: '반응을 남기지 못했습니다. 잠시 후 다시 시도해주세요.',\n    };\n  }\n\n  const paths = new Set(['/prayer']);\n  payload.revalidate?.forEach((path) => paths.add(path));\n  paths.forEach((path) => revalidatePath(path));\n\n  return { status: 'success' };\n}\n\ntype UpdatePrayerResult =\n  | {\n      status: 'error';\n      message: string;\n      fieldErrors?: Record<string, string[]>;\n    }\n  | void;\n\nexport async function updatePrayerAction(values: PrayerUpdateValues): Promise<UpdatePrayerResult> {\n  const profile = await getCurrentProfile();\n\n  if (!profile) {\n    redirect('/login?redirectTo=/prayer');\n  }\n\n  const parsed = prayerUpdateSchema.safeParse(values);\n\n  if (!parsed.success) {\n    return {\n      status: 'error',\n      message: '입력값을 확인해주세요.',\n      fieldErrors: parsed.error.flatten().fieldErrors,\n    };\n  }\n\n  const supabase = await createSupabaseServerClient();\n\n  const { data: prayer, error } = await supabase\n    .from('prayers')\n    .select('author_id, image_url')\n    .eq('id', parsed.data.id)\n    .maybeSingle();\n\n  if (error || !prayer) {\n    logError('기도 조회 실패', { error, prayerId: parsed.data.id });\n    return {\n      status: 'error',\n      message: '기도 제목을 찾지 못했습니다.',\n    };\n  }\n\n  if (prayer.author_id !== profile.id && !isAdmin(profile.role)) {\n    return {\n      status: 'error',\n      message: '수정 권한이 없습니다.',\n    };\n  }\n\n  const nextImageUrl = parsed.data.imageUrl ? parsed.data.imageUrl.trim() : null;\n  const sanitizedContent = sanitizeHTML(parsed.data.content);\n\n  const { error: updateError } = await supabase\n    .from('prayers')\n    .update({\n      content: sanitizedContent,\n      image_url: nextImageUrl,\n    })\n    .eq('id', parsed.data.id);\n\n  if (updateError) {\n    logError('기도 수정 실패', { error: updateError, prayerId: parsed.data.id });\n    return {\n      status: 'error',\n      message: '기도 제목을 수정하지 못했습니다. 잠시 후 다시 시도해주세요.',\n    };\n  }\n\n  if (prayer.image_url && prayer.image_url !== nextImageUrl) {\n    await removePublicStorageFile(supabase, prayer.image_url);\n  }\n\n  revalidatePath('/prayer');\n  revalidatePath(`/prayer/${parsed.data.id}`);\n  redirect(`/prayer/${parsed.data.id}`);\n}\n","import { z } from 'zod';\n\nexport const prayerCreateSchema = z.object({\n  content: z.string().min(10, '기도 제목은 최소 10자 이상 작성해주세요.'),\n  imageUrl: z.string().url('올바른 이미지 주소가 아닙니다.').optional().or(z.literal('').transform(() => undefined)),\n});\n\nexport type PrayerCreateValues = z.infer<typeof prayerCreateSchema>;\n\nexport const prayerUpdateSchema = prayerCreateSchema.extend({\n  id: z.string().uuid(),\n});\n\nexport type PrayerUpdateValues = z.infer<typeof prayerUpdateSchema>;\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const PrayerReactions = registerClientReference(\n    function() { throw new Error(\"Attempted to call PrayerReactions() from the server but PrayerReactions is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/prayer/prayer-reactions.tsx\",\n    \"PrayerReactions\",\n);\n","export {signOutAction as '006e87d2ba50d7749061e0234a2c5ee819ab969621'} from 'ACTIONS_MODULE0'\nexport {createPrayerAction as '4046af61854c648fbcc9fd269c634f0f2076a74132'} from 'ACTIONS_MODULE1'\nexport {reactPrayerAction as '405b49b53727932b210d3a7e3cfe2f69bacb69ef1d'} from 'ACTIONS_MODULE1'\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const PrayerForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call PrayerForm() from the server but PrayerForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/forms/prayer-form.tsx\",\n    \"PrayerForm\",\n);\n","import type { Metadata } from 'next';\nimport Link from 'next/link';\n\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { PrayerForm } from '@/components/forms/prayer-form';\nimport { PrayerReactions } from '@/components/prayer/prayer-reactions';\nimport { detectInitialLanguage } from '@/lib/i18n/detect-language';\nimport { getPrayers } from '@/lib/data/prayer';\nimport { formatDate } from '@/lib/utils/date';\nimport { getCurrentProfile } from '@/lib/auth/session';\nimport { isApproved } from '@/lib/auth/utils';\n\nconst PAGE_SIZE = 10;\nconst TITLE = '함께 기도해요 | 위루다 선교 공동체';\nconst DESCRIPTION =\n  '선교지의 기도 제목을 확인하고 아멘, 함께 기도합니다로 응답하세요. 승인된 회원은 직접 기도 제목을 등록할 수 있습니다.';\n\nexport const metadata: Metadata = {\n  title: TITLE,\n  description: DESCRIPTION,\n  openGraph: {\n    title: TITLE,\n    description: DESCRIPTION,\n    url: '/prayer',\n  },\n  twitter: {\n    card: 'summary',\n    title: TITLE,\n    description: DESCRIPTION,\n  },\n};\n\ntype PrayerPageProps = {\n  searchParams: {\n    page?: string;\n  };\n};\n\nexport default async function PrayerPage({ searchParams }: PrayerPageProps) {\n  const language = await detectInitialLanguage();\n  const profile = await getCurrentProfile();\n\n  const page = Math.max(Number(searchParams.page ?? '1') || 1, 1);\n\n  const { items, total } = await getPrayers({\n    page,\n    pageSize: PAGE_SIZE,\n  });\n\n  const totalPages = Math.max(Math.ceil(total / PAGE_SIZE), 1);\n\n  return (\n    <div className=\"space-y-8\">\n      <header className=\"space-y-2\">\n        <h1 className=\"text-2xl font-semibold text-slate-900\">함께 기도해요</h1>\n        <p className=\"text-sm text-muted-foreground\">함께 울고 웃는 기도 공동체를 만들어가요.</p>\n      </header>\n\n      {profile && isApproved(profile.status) ? (\n        <PrayerForm />\n      ) : (\n        <Alert>\n          <AlertDescription>\n            기도 제목을 등록하려면 먼저 로그인하고 승인 절차를 완료해주세요.{' '}\n            <Link href=\"/login?redirectTo=/prayer\" className=\"text-primary underline-offset-4 hover:underline\">\n              로그인하기\n            </Link>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <Separator />\n\n      <div className=\"space-y-4\">\n        {items.length === 0 && (\n          <div className=\"rounded-2xl border border-dashed border-border/60 bg-muted/20 p-10 text-center text-sm text-muted-foreground\">\n            등록된 기도 제목이 아직 없습니다.\n          </div>\n        )}\n\n        {items.map((item) => (\n          <Card key={item.id} className=\"border border-border/60\">\n            <CardHeader className=\"flex flex-col gap-2 md:flex-row md:items-center md:justify-between\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <span>{formatDate(item.createdAt, language)}</span>\n                  {item.isAnswered && <Badge variant=\"secondary\">응답됨</Badge>}\n                </div>\n                <CardTitle className=\"text-base leading-relaxed text-slate-900\">{item.content}</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">작성자: {item.authorName}</p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button asChild variant=\"outline\" size=\"sm\">\n                  <Link href={`/prayer/${item.id}`}>자세히</Link>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"flex flex-col gap-4 border-t border-border/40 bg-muted/10 p-4 md:flex-row md:items-center md:justify-between\">\n              <p className=\"text-xs text-muted-foreground\">\n                {item.isAnswered ? '응답 받은 기도입니다. 하나님께 감사드립니다.' : '함께 기도하며 응답을 기대해요.'}\n              </p>\n              <PrayerReactions\n                prayerId={item.id}\n                counts={item.reactions}\n                revalidatePaths={[`/prayer/${item.id}`]}\n              />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <PrayerPagination page={page} totalPages={totalPages} />\n    </div>\n  );\n}\n\ntype PaginationProps = {\n  page: number;\n  totalPages: number;\n};\n\nfunction PrayerPagination({ page, totalPages }: PaginationProps) {\n  if (totalPages <= 1) {\n    return null;\n  }\n\n  const makeHref = (target: number) => {\n    const params = new URLSearchParams();\n    if (target > 1) params.set('page', String(target));\n    const suffix = params.toString();\n    return suffix ? `/prayer?${suffix}` : '/prayer';\n  };\n\n  return (\n    <div className=\"flex items-center justify-between rounded-xl border border-border/60 bg-white p-4 text-sm\">\n      <Button asChild variant=\"ghost\" disabled={page <= 1}>\n        <Link href={makeHref(page - 1)}>이전</Link>\n      </Button>\n      <span className=\"text-muted-foreground\">\n        {page} / {totalPages}\n      </span>\n      <Button asChild variant=\"ghost\" disabled={page >= totalPages}>\n        <Link href={makeHref(page + 1)}>다음</Link>\n      </Button>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[2,11,13]}